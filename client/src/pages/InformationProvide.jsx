import React, { useState, useContext } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { Apis, authApis } from "../configs/Apis"; // Gi·∫£ s·ª≠ b·∫°n c√≥ authApis ·ªü ƒë√¢y
import { MyUserContext } from "../configs/MyContext";

const InformationProvide = () => {
  const user = useContext(MyUserContext);
  const location = useLocation();
  const navigate = useNavigate();
  const { selectedBooks = [], selectedCartId } = location.state || {};

  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    // B∆∞·ªõc 1: Th√¥ng tin c√° nh√¢n
    fullName: "",
    email: "",
    phone: "",
    cccd: "",
    birthDate: "",
    profession: "",

    // B∆∞·ªõc 2: ƒê·ªãa ch·ªâ li√™n h·ªá
    address: "",
    ward: "",
    district: "",
    city: "",
    postalCode: "",

    // B∆∞·ªõc 3: Chi ti·∫øt m∆∞·ª£n s√°ch
    borrowDays: "7",
    returnDate: "22/8/2025",
    purpose: "",
    receiveMethod: "DIRECT",
    emergencyContactName: "",
    emergencyContactPhone: "",
    relationship: "",

    // B∆∞·ªõc 4: X√°c nh·∫≠n
    agreeTerms1: false,
    agreeTerms2: false,
    agreeNotifications: false,
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [progress, setProgress] = useState({
    current: 0,
    total: 0,
    message: "",
  });

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const nextStep = async () => {
    if (isSubmitting) return; // tr√°nh double click khi ƒëang submit

    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
      return;
    }

    // hi·ªán t·∫°i ƒëang ·ªü b∆∞·ªõc 4 => g·ª≠i request
    if (!formData.agreeTerms1 || !formData.agreeTerms2) {
      alert("B·∫°n c·∫ßn ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n b·∫Øt bu·ªôc!");
      return;
    }

    const payload = {
      user_id: user?.id,
      books: (selectedBooks || []).map((item) => ({
        book_id: item.id,
        quantity: item.quantity,
      })),
      borrowing_method:
        formData.receiveMethod === "Nh·∫≠n t·∫°i th∆∞ vi·ªán" ||
        formData.receiveMethod === "DIRECT"
          ? "DIRECT"
          : "TRANSPORT",
      purpose: formData.purpose,
      name: formData.fullName,
      phone: formData.phone,
      cccd: formData.cccd,
      job: formData.profession,
      address: formData.address,
      ward: formData.ward,
      province: formData.city, // ƒë√∫ng theo backend
      city: formData.city,
      number_of_requests_day: 1, // backend d∆∞·ªùng nh∆∞ expect 1
    };

    console.log("D·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i ƒëi", payload);

    setIsSubmitting(true);
    setProgress({
      current: 0,
      total: (selectedBooks || []).length + 1,
      message: "G·ª≠i y√™u c·∫ßu",
    });

    try {
      const res = await authApis().post("/requests/", payload);
      console.log("Request th√†nh c√¥ng: ", res.data);

      // c·∫≠p nh·∫≠t progress: ƒë√£ g·ª≠i request
      setProgress((p) => ({
        ...p,
        current: p.current + 1,
        message: "C·∫≠p nh·∫≠t gi·ªè h√†ng v√† s√°ch",
      }));

      // x·ª≠ l√Ω t·ª´ng s√°ch: c·∫≠p nh·∫≠t cart + c·∫≠p nh·∫≠t quantity s√°ch
      for (let i = 0; i < (selectedBooks || []).length; i++) {
        const book = selectedBooks[i];

        console.log(book.id);

        // c·∫≠p nh·∫≠t cart
        await authApis().patch(`/carts/`, {
          cart_id: selectedCartId,
          book_id: book.id,
          quantity: book.quantity,
        });

        console.log("test1");

        // l·∫•y th√¥ng tin s√°ch hi·ªán t·∫°i
        const bookRes = await Apis.get(`/books/${book.id}`);

        console.log("test2");

        // chu·∫©n b·ªã form data ƒë·ªÉ patch book
        const fd = new FormData();
        fd.append("quantity", bookRes.data.quantity - book.quantity);
        for (let [key, value] of fd.entries()) {
          console.log(key, value);
        }

        await authApis().patch(`/books/${book.id}`, fd);

        console.log("test3");

        // c·∫≠p nh·∫≠t progress t·ª´ng s√°ch
        setProgress((p) => ({
          ...p,
          current: p.current + 1,
          message: `ƒêang x·ª≠ l√Ω s√°ch ${i + 1}/${(selectedBooks || []).length}`,
        }));
      }

      alert("M∆∞·ª£n s√°ch th√†nh c√¥ng!");
      navigate("/cart");
    } catch (err) {
      console.error(err);
      alert("C√≥ l·ªói x·∫£y ra khi g·ª≠i y√™u c·∫ßu!");
    } finally {
      setIsSubmitting(false);
      setProgress({ current: 0, total: 0, message: "" });
    }
  };

  const prevStep = () => {
    if (isSubmitting) return; // kh√¥ng cho back khi ƒëang g·ª≠i
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const StepIndicator = ({ step, subtitle, isActive, isCompleted }) => (
    <div className="flex items-center space-x-3">
      <div
        className={`w-12 h-12 rounded-full flex items-center justify-center ${
          isCompleted
            ? "bg-green-500 text-white"
            : isActive
            ? "bg-blue-500 text-white"
            : "bg-gray-200 text-gray-500"
        }`}
      >
        {isCompleted ? "‚úì" : step}
      </div>
      <div className="flex-1">
        <div
          className={`font-medium ${
            isActive
              ? "text-blue-600"
              : isCompleted
              ? "text-green-600"
              : "text-gray-500"
          }`}
        >
          B∆∞·ªõc {step}
        </div>
        <div className="text-sm text-gray-600">{subtitle}</div>
      </div>
    </div>
  );

  const renderStep1 = () => (
    <div
      className={`space-y-6 ${
        isSubmitting ? "opacity-60 pointer-events-none" : ""
      }`}
    >
      <div className="flex items-center space-x-2 text-blue-600 mb-6">
        <div className="w-6 h-6 rounded-full bg-blue-100 flex items-center justify-center">
          <span className="text-sm">üë§</span>
        </div>
        <h2 className="text-xl font-semibold">Th√¥ng tin c√° nh√¢n</h2>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-2">
            H·ªç v√† t√™n <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            value={formData.fullName}
            onChange={(e) => handleInputChange("fullName", e.target.value)}
            placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">
            Email <span className="text-red-500">*</span>
          </label>
          <input
            type="email"
            value={formData.email}
            onChange={(e) => handleInputChange("email", e.target.value)}
            placeholder="example@email.com"
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">
            S·ªë ƒëi·ªán tho·∫°i <span className="text-red-500">*</span>
          </label>
          <input
            type="tel"
            value={formData.phone}
            onChange={(e) => handleInputChange("phone", e.target.value)}
            placeholder="0123456789"
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">
            CCCD/CMND <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            value={formData.cccd}
            onChange={(e) => handleInputChange("cccd", e.target.value)}
            placeholder="S·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n"
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">
            Ng√†y sinh <span className="text-red-500">*</span>
          </label>
          <input
            type="date"
            value={formData.birthDate}
            onChange={(e) => handleInputChange("birthDate", e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Ngh·ªÅ nghi·ªáp</label>
          <input
            type="text"
            value={formData.profession}
            onChange={(e) => handleInputChange("profession", e.target.value)}
            placeholder="Sinh vi√™n, Gi√°o vi√™n, K·ªπ s∆∞..."
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div
      className={`space-y-6 ${
        isSubmitting ? "opacity-60 pointer-events-none" : ""
      }`}
    >
      <div className="flex items-center space-x-2 text-blue-600 mb-6">
        <div className="w-6 h-6 rounded-full bg-blue-100 flex items-center justify-center">
          <span className="text-sm">üìç</span>
        </div>
        <h2 className="text-xl font-semibold">ƒê·ªãa ch·ªâ li√™n h·ªá</h2>
      </div>

      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-2">
            ƒê·ªãa ch·ªâ c·ª• th·ªÉ <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            value={formData.address}
            onChange={(e) => handleInputChange("address", e.target.value)}
            placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng..."
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">
              Ph∆∞·ªùng/X√£ <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.ward}
              onChange={(e) => handleInputChange("ward", e.target.value)}
              placeholder="Ph∆∞·ªùng/X√£"
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Qu·∫≠n/Huy·ªán <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.district}
              onChange={(e) => handleInputChange("district", e.target.value)}
              placeholder="Qu·∫≠n/Huy·ªán"
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              T·ªânh/Th√†nh ph·ªë <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.city}
              onChange={(e) => handleInputChange("city", e.target.value)}
              placeholder="T·ªânh/Th√†nh ph·ªë"
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div
      className={`space-y-6 ${
        isSubmitting ? "opacity-60 pointer-events-none" : ""
      }`}
    >
      <div className="flex items-center space-x-2 text-blue-600 mb-6">
        <div className="w-6 h-6 rounded-full bg-blue-100 flex items-center justify-center">
          <span className="text-sm">üìö</span>
        </div>
        <h2 className="text-xl font-semibold">Chi ti·∫øt m∆∞·ª£n s√°ch</h2>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-2">
            S·ªë ng√†y m∆∞·ª£n <span className="text-red-500">*</span>
          </label>
          <select
            value={formData.borrowDays}
            onChange={(e) => handleInputChange("borrowDays", e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="7">7 ng√†y</option>
            <option value="14">14 ng√†y</option>
            <option value="30">30 ng√†y</option>
          </select>
          <p className="text-sm text-gray-500 mt-1">
            Ng√†y tr·∫£ d·ª± ki·∫øn: 22/8/2025
          </p>
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">
            Ph∆∞∆°ng th·ª©c nh·∫≠n s√°ch
          </label>
          <select
            value={formData.receiveMethod}
            onChange={(e) => handleInputChange("receiveMethod", e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="Nh·∫≠n t·∫°i th∆∞ vi·ªán">Nh·∫≠n t·∫°i th∆∞ vi·ªán</option>
            <option value="Giao t·∫≠n n∆°i">Giao t·∫≠n n∆°i</option>
          </select>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium mb-2">
          M·ª•c ƒë√≠ch m∆∞·ª£n s√°ch <span className="text-red-500">*</span>
        </label>
        <textarea
          value={formData.purpose}
          onChange={(e) => handleInputChange("purpose", e.target.value)}
          placeholder="Nghi√™n c·ª©u, h·ªçc t·∫≠p, tham kh·∫£o..."
          rows="4"
          className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
        />
      </div>
    </div>
  );

  const renderStep4 = () => (
    <div className="space-y-6">
      <div className="flex items-center space-x-2 text-blue-600 mb-6">
        <div className="w-6 h-6 rounded-full bg-blue-100 flex items-center justify-center">
          <span className="text-sm">‚úì</span>
        </div>
        <h2 className="text-xl font-semibold">X√°c nh·∫≠n th√¥ng tin</h2>
      </div>

      <div className="bg-blue-50 p-6 rounded-lg">
        <div className="flex items-center space-x-2 text-blue-600 mb-4">
          <span className="text-sm">üìã</span>
          <h3 className="font-semibold">X√°c nh·∫≠n th√¥ng tin</h3>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm">
          <div className="space-y-2">
            <div>
              <strong>H·ªç t√™n:</strong> {formData.fullName || "adad"}
            </div>
            <div>
              <strong>Email:</strong> {formData.email || "ada"}
            </div>
            <div>
              <strong>ƒêi·ªán tho·∫°i:</strong> {formData.phone || "adad"}
            </div>
            <div>
              <strong>CCCD:</strong> {formData.cccd || "adad"}
            </div>
          </div>
          <div className="space-y-2">
            <div>
              <strong>ƒê·ªãa ch·ªâ:</strong> {formData.address || "adad"}
            </div>
            <div>
              <strong>Ph∆∞·ªùng/X√É:</strong> {formData.ward || "ada"}
            </div>
            <div>
              <strong>Qu·∫≠n/Huy·ªán:</strong> {formData.district || "dadad"}
            </div>
            <div>
              <strong>T·ªânh/TP:</strong> {formData.city || "adad"}
            </div>
          </div>
        </div>

        <div className="mt-4 pt-4 border-t border-blue-200 space-y-2 text-sm">
          <div>
            <strong>S·ªë ng√†y m∆∞·ª£n:</strong> 7 ng√†y
          </div>
          <div>
            <strong>Ng√†y tr·∫£ d·ª± ki·∫øn:</strong> 22/8/2025
          </div>
          <div>
            <strong>Ph∆∞∆°ng th·ª©c nh·∫≠n:</strong> Nh·∫≠n t·∫°i th∆∞ vi·ªán
          </div>
          <div>
            <strong>Li√™n h·ªá kh·∫©n c·∫•p:</strong>{" "}
            {formData.emergencyContactName || "adad"} -{" "}
            {formData.emergencyContactPhone || "adad"}
          </div>
        </div>
      </div>

      <div className="space-y-4">
        <label className="flex items-start space-x-3">
          <input
            type="checkbox"
            checked={formData.agreeTerms1}
            onChange={(e) => handleInputChange("agreeTerms1", e.target.checked)}
            className="mt-1 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
          />
          <span className="text-sm text-gray-700">
            T√¥i ƒë·ªìng √Ω v·ªõi{" "}
            <span className="text-blue-600 underline">ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng</span>{" "}
            v√† cam k·∫øt tr·∫£ s√°ch ƒë√∫ng h·∫°n, b·ªìi th∆∞·ªùng n·∫øu l√†m h·ªèng ho·∫∑c m·∫•t s√°ch.{" "}
            <span className="text-red-500">*</span>
          </span>
        </label>

        <label className="flex items-start space-x-3">
          <input
            type="checkbox"
            checked={formData.agreeTerms2}
            onChange={(e) => handleInputChange("agreeTerms2", e.target.checked)}
            className="mt-1 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
          />
          <span className="text-sm text-gray-700">
            T√¥i ƒë·ªìng √Ω v·ªõi{" "}
            <span className="text-blue-600 underline">ch√≠nh s√°ch b·∫£o m·∫≠t</span>{" "}
            v√† vi·ªác th∆∞ vi·ªán s·ª≠ d·ª•ng th√¥ng tin c√° nh√¢n ƒë·ªÉ qu·∫£n l√Ω vi·ªác m∆∞·ª£n
            s√°ch. <span className="text-red-500">*</span>
          </span>
        </label>

        <label className="flex items-start space-x-3">
          <input
            type="checkbox"
            checked={formData.agreeNotifications}
            onChange={(e) =>
              handleInputChange("agreeNotifications", e.target.checked)
            }
            className="mt-1 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
          />
          <span className="text-sm text-gray-700">
            T√¥i mu·ªën nh·∫≠n th√¥ng b√°o v·ªÅ s√°ch m·ªõi, gia h·∫°n v√† c√°c ho·∫°t ƒë·ªông c·ªßa
            th∆∞ vi·ªán qua email/SMS.
          </span>
        </label>
      </div>
    </div>
  );

  const [showAllBooks, setShowAllBooks] = useState(false);

  const displayedBooks = showAllBooks
    ? selectedBooks
    : selectedBooks.slice(0, 2);

  const renderSummary = () => (
    <div className="bg-gray-50 p-4 rounded-lg">
      <div className="flex items-center space-x-2 text-blue-600 mb-4">
        <div className="w-6 h-6 rounded-full bg-blue-100 flex items-center justify-center">
          <span className="text-sm">üìö</span>
        </div>
        <h3 className="font-semibold">S√°ch c·∫ßn m∆∞·ª£n</h3>
      </div>

      {/* Books List with Border */}
      <div className="border-2 border-gray-200 rounded-lg p-4 bg-white mb-4">
        <div className="space-y-3">
          {displayedBooks.map((book) => (
            <div
              key={book.id}
              className="flex space-x-3 p-3 bg-gray-50 rounded-lg border"
            >
              {/* Book Image */}
              <div className="flex-shrink-0">
                <img
                  src={book.image}
                  alt={book.title}
                  className="w-16 h-20 object-cover rounded border shadow-sm"
                />
              </div>

              {/* Book Info */}
              <div className="flex-1 min-w-0">
                <div className="text-sm font-medium text-gray-900 truncate">
                  {book.title}
                </div>
                <div className="text-xs text-gray-600 mt-1">
                  b·ªüi {book.author}
                </div>
                <div className="text-xs text-blue-600 mt-1">
                  {book.category}
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  S·ªë l∆∞·ª£ng: {book.quantity}
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Show More/Less Button */}
        {selectedBooks.length > 2 && (
          <div className="mt-3 text-center">
            <button
              onClick={() => setShowAllBooks(!showAllBooks)}
              className="text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center justify-center space-x-1 mx-auto"
            >
              <span>{showAllBooks ? "Thu g·ªçn" : "Xem th√™m"}</span>
              <span className="text-xs">
                {showAllBooks ? "‚Üë" : `(+${selectedBooks.length - 2} s√°ch)`}
              </span>
            </button>
          </div>
        )}
      </div>

      <div className="mt-4 space-y-2 text-sm">
        <div className="flex justify-between">
          <span>T·ªïng s·ªë s√°ch:</span>
          <span className="font-medium">{selectedBooks.length} cu·ªën</span>
        </div>
        <div className="flex justify-between">
          <span>Th·ªùi gian m∆∞·ª£n:</span>
          <span className="font-medium">{formData.borrowDays} ng√†y</span>
        </div>
        <div className="flex justify-between">
          <span>Ng√†y tr·∫£ d·ª± ki·∫øn:</span>
          <span className="font-medium text-blue-600">
            {formData.returnDate}
          </span>
        </div>
        <div className="flex justify-between">
          <span>Ph√≠ m∆∞·ª£n:</span>
          <span className="font-medium text-green-600">Mi·ªÖn ph√≠</span>
        </div>
      </div>

      <div className="mt-4 pt-4 border-t">
        <div className="space-y-2 text-sm">
          <div className="flex items-center space-x-2">
            <div className="w-4 h-4 rounded-full bg-green-100 flex items-center justify-center">
              <span className="text-xs text-green-600">‚úì</span>
            </div>
            <span>Th√¥ng tin th∆∞ vi·ªán</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-4 h-4 rounded-full bg-green-100 flex items-center justify-center">
              <span className="text-xs text-green-600">‚úì</span>
            </div>
            <span>M∆∞·ª£n s√°ch ho√†n to√†n mi·ªÖn ph√≠</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-4 h-4 rounded-full bg-green-100 flex items-center justify-center">
              <span className="text-xs text-green-600">‚úì</span>
            </div>
            <span>C√≥ th·ªÉ gia h·∫°n 1 l·∫ßn</span>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="max-w-6xl mx-auto p-6 bg-gray-50 min-h-screen relative">
      {/* Loading overlay */}
      {isSubmitting && (
        <div className="absolute inset-0 bg-black/30 z-40 flex items-center justify-center">
          <div className="bg-white/90 backdrop-blur-md rounded-lg p-6 w-11/12 max-w-md text-center shadow-lg">
            <div className="flex flex-col items-center space-y-4">
              <div className="animate-spin rounded-full border-4 border-t-4 border-gray-200 border-t-blue-600 h-12 w-12"></div>
              <div className="text-sm font-medium">
                {progress.message || "ƒêang x·ª≠ l√Ω..."}
              </div>
              <div className="text-xs text-gray-600">
                {progress.current}/{progress.total}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Header Steps */}
      <div className="bg-white rounded-lg p-6 mb-6 shadow-sm">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <StepIndicator
            step={1}
            title="B∆∞·ªõc 1"
            subtitle="Th√¥ng tin c√° nh√¢n"
            isActive={currentStep === 1}
            isCompleted={currentStep > 1}
          />
          <StepIndicator
            step={2}
            title="B∆∞·ªõc 2"
            subtitle="ƒê·ªãa ch·ªâ"
            isActive={currentStep === 2}
            isCompleted={currentStep > 2}
          />
          <StepIndicator
            step={3}
            title="B∆∞·ªõc 3"
            subtitle="Chi ti·∫øt m∆∞·ª£n s√°ch"
            isActive={currentStep === 3}
            isCompleted={currentStep > 3}
          />
          <StepIndicator
            step={4}
            title="B∆∞·ªõc 4"
            subtitle="X√°c nh·∫≠n"
            isActive={currentStep === 4}
            isCompleted={false}
          />
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Content */}
        <div className="lg:col-span-2">
          <div className="bg-white rounded-lg p-6 shadow-sm">
            {currentStep === 1 && renderStep1()}
            {currentStep === 2 && renderStep2()}
            {currentStep === 3 && renderStep3()}
            {currentStep === 4 && renderStep4()}

            {/* Navigation Buttons */}
            <div className="flex justify-between items-center mt-8 pt-6 border-t">
              <button
                onClick={prevStep}
                disabled={currentStep === 1 || isSubmitting}
                className={`flex items-center space-x-2 px-6 py-3 rounded-lg ${
                  currentStep === 1 || isSubmitting
                    ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                    : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                }`}
              >
                <span>‚Üê</span>
                <span>Quay l·∫°i</span>
              </button>

              <button
                onClick={nextStep}
                disabled={isSubmitting}
                className={`flex items-center space-x-2 px-6 py-3 rounded-lg ${
                  currentStep === 4
                    ? "bg-green-500 text-white hover:bg-green-600"
                    : "bg-blue-500 text-white hover:bg-blue-600"
                }`}
              >
                <span>
                  {isSubmitting
                    ? "ƒêang g·ª≠i"
                    : currentStep === 4
                    ? "Ho√†n th√†nh"
                    : "Ti·∫øp t·ª•c"}
                </span>
                <span>‚Üí</span>
              </button>
            </div>
          </div>
        </div>

        {/* Summary Sidebar */}
        <div className="lg:col-span-1">{renderSummary()}</div>
      </div>
    </div>
  );
};

export default InformationProvide;
